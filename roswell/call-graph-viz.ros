#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -L sbcl-bin dynamic-space-size=4000 -m call-graph-viz -Q -- $0 "$@"
|#
(ql:quickload :asdf-viz :silent t)
(in-package :asdf-viz.call-graph)

(defvar *packages* nil)
(defvar *functions* nil)
(defvar *include* nil)

(defun main (&rest argv)
  (declare (ignorable argv))
  (match argv
    (nil
     (let ((s #+nil (read-from-string (ros:opt "script"))
              "call-graph-viz"))
       (format *error-output* "
Usage: call-graph-viz [options...] png-path

source options
  -s / --system SYSTEM : Quickload the system in the beginning. (specified multiple times, accumulates)
  -l / --load FILE     : Load the FILE before the visualization.(specified multiple times, accumulates)
  -r / --ros FILE      : Load a .ros script before the visualization. (specified multiple times, accumulates)
                         This avoids the problem of shebangs in roswell scripts.

filter options
  -p / --package PKG   : Limit the symbols to the package.      (specified multiple times, accumulates)
                         Package names are automatically upcased.
  -f / --function FN   : Specify the root nodes..               (specified multiple times, accumulates)
  -i / --include-outside-calls : Specifies if the leaf node can contain symbols outside the specified packages.

Examples:

~a -s alexandria -p alexandria -f alexandria:symbolicate symbolicate.png
~a -s alexandria -f alexandria:symbolicate symbolicate.png
 -- Visualize the call graph of alexandria:symbolicate .
    The second example has the same meaning, where -p option is inferred from the symbol package.

~a -i -s alexandria -f alexandria:symbolicate symbolicate2.png
 -- Visualize the call graph of alexandria:symbolicate . Leaf nodes include symbols outside alexandria.

~a -s alexandria -p alexandria alexandria.png
 -- Visualize the call graph of all external fbound symbols in alexandria
" s s s s))
     1)
    ((list* (or "-s" "--system") system rest)
     (ql:quickload system :silent t)
     (apply #'main rest))
    ((list* (or "-p" "--package") pkg rest)
     (push pkg *packages*)
     (apply #'main rest))
    ((list* (or "-l" "--load") file rest)
     (load file)
     (apply #'main rest))
    ((list* (or "-r" "--ros") file rest)
     (roswell:ignore-shebang)
     (load file)
     (apply #'main rest))
    ((list* (or "-f" "--function") fn rest)
     (push fn *functions*)
     (apply #'main rest))
    ((list* (or "-i" "--include-outside-calls") rest)
     (setf *include* t)
     (apply #'main rest))
    ((list png)
     (let ((functions (mapcar #'read-from-string *functions*))
           (packages (mapcar #'find-package (mapcar #'string-upcase *packages*))))
       (visualize-callgraph
        png
        (or packages (remove-duplicates (mapcar #'symbol-package functions)))
        :seeds functions
        :include-outside-calls *include*))
     (format t "~a~%" png))))
